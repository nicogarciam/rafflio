#!/usr/bin/env node

/**
 * Script de prueba para verificar la configuraci√≥n SMTP
 * Uso: node test-smtp.js
 */

require('dotenv').config();
const nodemailer = require('nodemailer');

// Configuraci√≥n del transporter (igual que en index.ts)
const transporter = nodemailer.createTransport({
  service: 'Gmail',
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS,
  },
  // Configuraciones para entornos de producci√≥n
  pool: true,
  maxConnections: 5,
  maxMessages: 100,
  rateLimit: 14,
  // Timeouts m√°s generosos para entornos de producci√≥n
  connectionTimeout: 60000,
  greetingTimeout: 30000,
  socketTimeout: 60000,
  // Configuraciones de seguridad
  secure: true,
  tls: {
    rejectUnauthorized: false,
    ciphers: 'SSLv3'
  },
  // Logging para debugging
  debug: true,
  logger: true
});

async function testSMTPConnection() {
  console.log('üîç Probando conexi√≥n SMTP...');
  console.log('üìß Usuario:', process.env.SMTP_USER);
  console.log('üîë Contrase√±a:', process.env.SMTP_PASS ? 'Configurada' : 'No configurada');
  
  try {
    // Verificar conexi√≥n
    console.log('\n1Ô∏è‚É£ Verificando conexi√≥n SMTP...');
    await transporter.verify();
    console.log('‚úÖ Conexi√≥n SMTP verificada correctamente');
    
    // Probar env√≠o de email
    console.log('\n2Ô∏è‚É£ Probando env√≠o de email...');
    const testEmail = {
      from: 'no-reply@rafflio.com <' + process.env.SMTP_USER + '>',
      to: process.env.SMTP_USER, // Enviar a s√≠ mismo para prueba
      subject: 'Test SMTP - Rafflio',
      html: `
        <h2>Test de Configuraci√≥n SMTP</h2>
        <p>Este es un email de prueba para verificar la configuraci√≥n SMTP.</p>
        <p>Timestamp: ${new Date().toISOString()}</p>
        <p>‚úÖ Si recibes este email, la configuraci√≥n SMTP est√° funcionando correctamente.</p>
        <hr>
        <p><strong>Configuraci√≥n aplicada:</strong></p>
        <ul>
          <li>Pool de conexiones: Habilitado</li>
          <li>Timeouts: 60s conexi√≥n, 30s saludo, 60s socket</li>
          <li>TLS: Habilitado con configuraci√≥n robusta</li>
          <li>Rate limiting: 14 emails/segundo</li>
        </ul>
      `
    };
    
    const result = await transporter.sendMail(testEmail);
    console.log('‚úÖ Email de prueba enviado exitosamente');
    console.log('üìß Message ID:', result.messageId);
    
    // Mostrar informaci√≥n del transporter
    console.log('\n3Ô∏è‚É£ Informaci√≥n del transporter:');
    console.log('üîß Configuraci√≥n:', transporter.options);
    
    console.log('\nüéâ ¬°Todas las pruebas pasaron exitosamente!');
    console.log('üöÄ El servidor SMTP est√° listo para producci√≥n.');
    
  } catch (error) {
    console.error('\n‚ùå Error durante las pruebas:');
    console.error('üîç Tipo de error:', error.code || 'Desconocido');
    console.error('üìù Mensaje:', error.message);
    console.error('üìö Stack:', error.stack);
    
    // Sugerencias de soluci√≥n
    console.log('\nüí° Sugerencias de soluci√≥n:');
    if (error.code === 'EAUTH') {
      console.log('   ‚Ä¢ Verificar credenciales SMTP (usuario y contrase√±a)');
      console.log('   ‚Ä¢ Asegurarse de usar App Password de Gmail, no contrase√±a principal');
    } else if (error.code === 'ETIMEDOUT') {
      console.log('   ‚Ä¢ Verificar conexi√≥n a internet');
      console.log('   ‚Ä¢ Revisar firewall del servidor');
      console.log('   ‚Ä¢ Probar desde otro entorno de red');
    } else if (error.code === 'ECONNECTION') {
      console.log('   ‚Ä¢ Verificar que Gmail permita conexiones SMTP');
      console.log('   ‚Ä¢ Revisar configuraci√≥n de seguridad de la cuenta');
    }
    
    process.exit(1);
  } finally {
    // Cerrar el transporter
    transporter.close();
    console.log('\nüîí Transporter cerrado.');
  }
}

// Ejecutar pruebas
if (require.main === module) {
  testSMTPConnection().catch(console.error);
}

module.exports = { testSMTPConnection, transporter };
